# Generated by Django 4.2.23 on 2025-09-03 22:02

from django.db import migrations


def migrate_lineitem_data(apps, schema_editor):
    """Copy existing LineItem data to appropriate submodels."""
    # Get the models
    LineItem = apps.get_model('invoicing', 'LineItem')
    EstimateLineItem = apps.get_model('jobs', 'EstimateLineItem')
    InvoiceLineItem = apps.get_model('invoicing', 'InvoiceLineItem')
    PurchaseOrderLineItem = apps.get_model('purchasing', 'PurchaseOrderLineItem')
    BillLineItem = apps.get_model('purchasing', 'BillLineItem')
    
    # Copy all existing line items to appropriate submodels
    for line_item in LineItem.objects.all():
        # Determine which submodel this line item belongs to
        if line_item.estimate_id:
            EstimateLineItem.objects.create(
                estimate_id=line_item.estimate_id,
                task_id=line_item.task_id,
                price_list_item_id=line_item.price_list_item_id,
                central_line_item_number=line_item.central_line_item_number,
                qty=line_item.qty,
                unit_parts_labor=line_item.unit_parts_labor,
                description=line_item.description,
                price_currency=line_item.price_currency,
            )
        elif line_item.invoice_id:
            InvoiceLineItem.objects.create(
                invoice_id=line_item.invoice_id,
                task_id=line_item.task_id,
                price_list_item_id=line_item.price_list_item_id,
                central_line_item_number=line_item.central_line_item_number,
                qty=line_item.qty,
                unit_parts_labor=line_item.unit_parts_labor,
                description=line_item.description,
                price_currency=line_item.price_currency,
            )
        elif line_item.purchase_order_id:
            PurchaseOrderLineItem.objects.create(
                purchase_order_id=line_item.purchase_order_id,
                task_id=line_item.task_id,
                price_list_item_id=line_item.price_list_item_id,
                central_line_item_number=line_item.central_line_item_number,
                qty=line_item.qty,
                unit_parts_labor=line_item.unit_parts_labor,
                description=line_item.description,
                price_currency=line_item.price_currency,
            )
        elif line_item.bill_id:
            BillLineItem.objects.create(
                bill_id=line_item.bill_id,
                task_id=line_item.task_id,
                price_list_item_id=line_item.price_list_item_id,
                central_line_item_number=line_item.central_line_item_number,
                qty=line_item.qty,
                unit_parts_labor=line_item.unit_parts_labor,
                description=line_item.description,
                price_currency=line_item.price_currency,
            )
        # If none of the above, this is an orphaned line item - could log or skip


def reverse_migrate_lineitem_data(apps, schema_editor):
    """Reverse migration - copy data back to original LineItem model."""
    # Get the models
    LineItem = apps.get_model('invoicing', 'LineItem')
    EstimateLineItem = apps.get_model('jobs', 'EstimateLineItem')
    InvoiceLineItem = apps.get_model('invoicing', 'InvoiceLineItem')
    PurchaseOrderLineItem = apps.get_model('purchasing', 'PurchaseOrderLineItem')
    BillLineItem = apps.get_model('purchasing', 'BillLineItem')
    
    # Copy from EstimateLineItem
    for item in EstimateLineItem.objects.all():
        LineItem.objects.create(
            estimate_id=item.estimate_id,
            task_id=item.task_id,
            price_list_item_id=item.price_list_item_id,
            central_line_item_number=item.central_line_item_number,
            qty=item.qty,
            unit_parts_labor=item.unit_parts_labor,
            description=item.description,
            price_currency=item.price_currency,
        )
    
    # Copy from InvoiceLineItem  
    for item in InvoiceLineItem.objects.all():
        LineItem.objects.create(
            invoice_id=item.invoice_id,
            task_id=item.task_id,
            price_list_item_id=item.price_list_item_id,
            central_line_item_number=item.central_line_item_number,
            qty=item.qty,
            unit_parts_labor=item.unit_parts_labor,
            description=item.description,
            price_currency=item.price_currency,
        )
    
    # Copy from PurchaseOrderLineItem
    for item in PurchaseOrderLineItem.objects.all():
        LineItem.objects.create(
            purchase_order_id=item.purchase_order_id,
            task_id=item.task_id,
            price_list_item_id=item.price_list_item_id,
            central_line_item_number=item.central_line_item_number,
            qty=item.qty,
            unit_parts_labor=item.unit_parts_labor,
            description=item.description,
            price_currency=item.price_currency,
        )
    
    # Copy from BillLineItem
    for item in BillLineItem.objects.all():
        LineItem.objects.create(
            bill_id=item.bill_id,
            task_id=item.task_id,
            price_list_item_id=item.price_list_item_id,
            central_line_item_number=item.central_line_item_number,
            qty=item.qty,
            unit_parts_labor=item.unit_parts_labor,
            description=item.description,
            price_currency=item.price_currency,
        )


class Migration(migrations.Migration):

    dependencies = [
        ('invoicing', '0003_invoicelineitem'),
        ('jobs', '0005_estimatelineitem'),
        ('purchasing', '0004_purchaseorderlineitem_billlineitem'),
    ]

    operations = [
        migrations.RunPython(migrate_lineitem_data, reverse_migrate_lineitem_data),
    ]
